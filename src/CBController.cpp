#include "CBController.h"

#include <QSettings>
#include <QtWidgets/QApplication>

#include "CBUtils.h"
#include "CBTranslator.h"

const QString kSettingBasePath="global/base";
const QString kSettingCollectAutogenerated="global/needCollect";

CBController::CBController(QObject *parent) : QObject(parent)
{

}


void CBController::start(){
    QString basePath;
    QSettings settings("settings.ini",QSettings::IniFormat);
    settings.setIniCodec("windows-1251");

    basePath=settings.value(kSettingBasePath,"").toString();

    if (basePath.isEmpty()){
        QMetaObject::invokeMethod(this->applicationWindow,
                                  "openBase"
                                  );
    }
    else {
        try {
            this->openBase(basePath);
        }
        catch (...) {
            QMetaObject::invokeMethod(this->applicationWindow,
                                      "openBaseAlert"
                                      );
        }
    }

}

void CBController::openBase(QString basePath){


    QSettings settings("settings.ini",QSettings::IniFormat);
    settings.setIniCodec("windows-1251");
    settings.setValue(kSettingBasePath,QVariant(basePath));

    QVariant var = settings.value(kSettingCollectAutogenerated,false);
    bool needCollect = var.toBool();

    this->applicationWindow->setProperty("needCollect", var);
/*
    if (baseProvider) {
        delete baseProvider;
    }
*/
    CBUtils::FromQmlFilePath(&basePath);
    /*
    basePath=basePath.append("/");
    baseProvider=new CVBBaseProvider(basePath,this);

    this->connect(baseProvider,SIGNAL(newTableWidget()),this,SLOT(newTableWidget()));
    this->connect(baseProvider,SIGNAL(getError(QString)),this,SLOT(showError(QString)));

    engine->addImageProvider(QLatin1String("imageProvider"),baseProvider->imageProvider);

    engine->rootContext()->setContextProperty("window",this);
*/
    QString locale = QLocale::system().name();
    QString filename = QString("languages/") + locale+".json";

    static CBTranslator translator;
    translator.m_needCollect = needCollect;
    if( translator.load(filename, basePath) ){
        QApplication::instance()->installTranslator(&translator);
        //QTextCodec::setCodecForTr(QTextCodec::codecForName("utf8"));
        qDebug() << "Translation file loaded" << filename;
    } else
        qDebug() << "Translation file not loaded:" << filename << "  dir:"<<basePath;

    //baseProvider->startLevel();
}

